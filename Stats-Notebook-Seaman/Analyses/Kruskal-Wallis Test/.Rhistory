0.0002441406, 0.0002441406, 0.0002441406, 0.0004882812, 0.0004882812, 0.0002441406, 0.0002441406, 0.0002441406)
)
p_value <- round(sum(distribution$Probability), digits=6)
p_value
# New dataframe: red bars from the plot above (image not included).
distribution <- data.frame(
`Possible Sum of Positive Ranks` = c(
0, 1, 2, 3, 75, 76, 77, 78),
Probability = c(
0.0002441406, 0.0002441406, 0.0002441406, 0.0004882812, 0.0004882812, 0.0002441406, 0.0002441406, 0.0002441406)
)
p_value <- round(sum(distribution$Probability), digits=10)
p_value
# New dataframe: red bars from the plot above (image not included).
distribution <- data.frame(
`Possible Sum of Positive Ranks` = c(
0, 1, 2, 3, 75, 76, 77, 78),
Probability = c(
0.0002441406, 0.0002441406, 0.0002441406, 0.0004882812, 0.0004882812, 0.0002441406, 0.0002441406, 0.0002441406)
)
p_value <- sum(distribution$Probability)
p_value
# New dataframe: red bars from the plot above (image not included).
distribution <- data.frame(
`Possible Sum of Positive Ranks` = c(
0, 1, 2, 3, 75, 76, 77, 78),
Probability = c(
0.0002441406, 0.0002441406, 0.0002441406, 0.0004882812, 0.0004882812, 0.0002441406, 0.0002441406, 0.0002441406)
)
p_value_string
# Compute p-value and store as a sting for clean output later.
p_value <- sum(distribution$Probability)
p_value_string <- as.character(p_value)
p_value
p_value_string
# Compute p-value and store as a sting for clean output later.
p_value <- sum(distribution$Probability)
p_value_string <- as.character(p_value)
options(digits = 16)
p_value
p_value_string
options(digits = 16)
p_value
sprintf("%.10f", p_value)
Honda_mpg %>%
select(differences, differences_abs, ranks, signed_ranks) %>%
arrange(ranks)
---
title: "Wilcoxon Tests"
library(car)
View(Duncan)
View(Duncan)
# Filter data set
Duncan2 <- Duncan %>%
filter(type %in% c(wc, prof))
# Filter data set
Duncan2 <- Duncan %>%
filter(type %in% c("wc", "prof"))
View(Duncan2)
dotplot <- (
ggplot(Honda_mpg, aes(x=mpg)) +
geom_dotplot(binwidth = .1) +
geom_segment(aes(x=17, xend=17, y=0, yend=0.5), color="skyblue") +
geom_text(aes(x=17, y=.6), label="Median Hypothesized to be 17 mpg", color="skyblue") +
labs(
title="2010 Honda Odyssey Gas Mileages",
y="",
x="Miles Per Gallon Vehicle Achieved on Systematically Selected Dates") +
theme(axis.ticks.y=element_blank(), axis.text.y=element_blank())
)
show(dotplot)
show(dotplot)
# View the dataframe
View(Honda_mpg)
# View the dataframe
View(Honda_mpg)
setwd("~/Desktop/MATH325/Stats-Notebook-Seaman/Analyses/Kruskal-Wallis Test")
food <- read_csv("../../food.csv") #food.csv is in the Data folder...
# From your menu bar (at the top of R-Studio) select:
# "Session -> Set working directory -> To source file location"
# Then play this chunk to get the data into R.
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
food <- read_csv("../../food.csv") #food.csv is in the Data folder...
setwd("~/Desktop/MATH325/Stats-Notebook-Seaman/Analyses/Kruskal-Wallis Test")
food <- read_csv("../../Data/food.csv") #food.csv is in the Data folder...
print(blue_colors)
blue_variant <- "deepskyblue4"
blue_colors <- c(
"aliceblue", "blue", "blue1", "blue2", "blue3", "blue4", "cadetblue", "cadetblue1", "cadetblue2",
"cadetblue3", "cadetblue4", "cornflowerblue", "darkblue", "deepskyblue", "deepskyblue1",
"deepskyblue2", "deepskyblue3", "deepskyblue4", "dodgerblue", "dodgerblue1", "dodgerblue2",
"dodgerblue3", "dodgerblue4", "lightblue", "lightblue1", "lightblue2", "lightblue3", "lightblue4",
"lightskyblue", "lightskyblue1", "lightskyblue2", "lightskyblue3", "lightskyblue4", "lightsteelblue",
"lightsteelblue1", "lightsteelblue2", "lightsteelblue3", "lightsteelblue4", "mediumblue", "midnightblue",
"navy", "navyblue", "powderblue", "royalblue", "royalblue1", "royalblue2", "royalblue3", "royalblue4",
"skyblue", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "slateblue", "slateblue1", "slateblue2",
"slateblue3", "slateblue4", "steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4"
)
print(blue_colors)
blue_variant <- "deepskyblue4"
blue_colors <- c(
"aliceblue", "blue", "blue1", "blue2", "blue3", "blue4", "cadetblue", "cadetblue1", "cadetblue2",
"cadetblue3", "cadetblue4", "cornflowerblue", "darkblue", "deepskyblue", "deepskyblue1",
"deepskyblue2", "deepskyblue3", "deepskyblue4", "dodgerblue", "dodgerblue1", "dodgerblue2",
"dodgerblue3", "dodgerblue4", "lightblue", "lightblue1", "lightblue2", "lightblue3", "lightblue4",
"lightskyblue", "lightskyblue1", "lightskyblue2", "lightskyblue3", "lightskyblue4", "lightsteelblue",
"lightsteelblue1", "lightsteelblue2", "lightsteelblue3", "lightsteelblue4", "mediumblue", "midnightblue",
"navy", "navyblue", "powderblue", "royalblue", "royalblue1", "royalblue2", "royalblue3", "royalblue4",
"skyblue", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "slateblue", "slateblue1", "slateblue2",
"slateblue3", "slateblue4", "steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4"
)
print(blue_colors)
# Blue Colors with index:
blue_colors_dict <- setNames(blue_colors, blue_colors)
blue_colors_dict
# Blue Colors with index:
blue_colors_dict <- setNames(blue_colors, paste0("color_", seq_along(blue_colors)))
blue_colors_dict
# Blue Colors with index:
cat("{\n",
paste0("    ", seq_along(blue_colors), ": \"", blue_colors, "\"", collapse = ",\n"),
"\n}\n")
install.packages(c("bit", "bit64", "broom", "bslib", "class", "cluster", "commonmark", "cpp11", "curl", "data.table", "doBy", "evaluate", "foreign", "fs", "generics", "ggnewscale", "ggplot2", "haven", "httpuv", "jpeg", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "mime", "nlme", "nloptr", "nnet", "openssl", "pander", "pbkrtest", "pillar", "processx", "promises", "ps", "purrr", "quantreg", "R6", "ragg", "Rcpp", "Rdpack", "readxl", "reformulas", "rpart", "sass", "scales", "spatial", "stringi", "survival", "systemfonts", "textshaping", "tinytex", "tzdb", "utf8", "xfun", "xml2"))
# From your menu bar (at the top of R-Studio) select:
# "Session -> Set working directory -> To source file location"
# Then play this chunk to get the data into R.
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
file_name <- "food.csv"
file_path <- "../../Data"
food <- read_csv(file_name+file_path)
install.packages(c("bit", "bit64", "broom", "bslib", "class", "cluster", "commonmark", "cpp11", "curl", "data.table", "doBy", "evaluate", "foreign", "fs", "generics", "ggnewscale", "ggplot2", "haven", "httpuv", "jpeg", "jsonlite", "KernSmooth", "knitr", "labelled", "later", "lattice", "lme4", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "mime", "nlme", "nloptr", "nnet", "openssl", "pander", "pbkrtest", "pillar", "processx", "promises", "ps", "purrr", "quantreg", "R6", "ragg", "Rcpp", "Rdpack", "readxl", "reformulas", "rpart", "sass", "scales", "spatial", "stringi", "survival", "systemfonts", "textshaping", "tinytex", "tzdb", "utf8", "xfun", "xml2"))
install.packages("haven")
installed.packages()
installed_packages <- rownames(installed.packages())
installed_packages
installed.packages()[, "Priority"]
ip <- installed.packages()
table(ip[, "Priority"])
install.packages(c(
"janitor",
"skimr",
"patchwork",
"here",
"stringdist",
"arrow",
"gt",
"ggthemes",
"bslib"
))
install.packages(c("janitor", "skimr", "patchwork", "here", "stringdist", "arrow", "gt", "ggthemes", "bslib"))
.rs.restartR()
update.packages(ask = FALSE, checkBuilt = TRUE)
cls
clear
cat("\014")
ip <- installed.packages()
user_pkgs <- ip[is.na(ip[, "Priority"]), "Package"]
user_pkgs
pkg_deps <- tools::package_dependencies(user_pkgs, recursive = TRUE)
reverse_deps <- unlist(pkg_deps)
orphans <- setdiff(user_pkgs, reverse_deps)
orphans
("\014")
cat("\014")
blue_colors <- c(
"aliceblue", "blue", "blue1", "blue2", "blue3", "blue4", "cadetblue", "cadetblue1", "cadetblue2",
"cadetblue3", "cadetblue4", "cornflowerblue", "darkblue", "deepskyblue", "deepskyblue1",
"deepskyblue2", "deepskyblue3", "deepskyblue4", "dodgerblue", "dodgerblue1", "dodgerblue2",
"dodgerblue3", "dodgerblue4", "lightblue", "lightblue1", "lightblue2", "lightblue3", "lightblue4",
"lightskyblue", "lightskyblue1", "lightskyblue2", "lightskyblue3", "lightskyblue4", "lightsteelblue",
"lightsteelblue1", "lightsteelblue2", "lightsteelblue3", "lightsteelblue4", "mediumblue", "midnightblue",
"navy", "navyblue", "powderblue", "royalblue", "royalblue1", "royalblue2", "royalblue3", "royalblue4",
"skyblue", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "slateblue", "slateblue1", "slateblue2",
"slateblue3", "slateblue4", "steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4"
)
# List of blue colors
blue_colors <- c(
"aliceblue", "blue", "blue1", "blue2", "blue3", "blue4", "cadetblue", "cadetblue1", "cadetblue2",
"cadetblue3", "cadetblue4", "cornflowerblue", "darkblue", "deepskyblue", "deepskyblue1",
"deepskyblue2", "deepskyblue3", "deepskyblue4", "dodgerblue", "dodgerblue1", "dodgerblue2",
"dodgerblue3", "dodgerblue4", "lightblue", "lightblue1", "lightblue2", "lightblue3", "lightblue4",
"lightskyblue", "lightskyblue1", "lightskyblue2", "lightskyblue3", "lightskyblue4", "lightsteelblue",
"lightsteelblue1", "lightsteelblue2", "lightsteelblue3", "lightsteelblue4", "mediumblue", "midnightblue",
"navy", "navyblue", "powderblue", "royalblue", "royalblue1", "royalblue2", "royalblue3", "royalblue4",
"skyblue", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "slateblue", "slateblue1", "slateblue2",
"slateblue3", "slateblue4", "steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4"
)
# List of red colors
red_colors <- c(
"indianred", "indianred1", "indianred2", "indianred3", "indianred4","lightcoral", "salmon", "salmon1",
"salmon2", "salmon3", "salmon4", "darksalmon", "lightsalmon", "lightsalmon1", "lightsalmon2",
"lightsalmon3", "lightsalmon4","red", "red1", "red2", "red3", "red4", "firebrick", "firebrick1",
"firebrick2", "firebrick3", "firebrick4", "brown", "brown1", "brown2", "brown3", "brown4", "tomato",
"tomato1", "tomato2", "tomato3", "tomato4", "orangered", "orangered1", "orangered2", "orangered3", "orangered4"
)
# Change text to blue
blue <- blue_colors[]
red <- red_colors[1]
View(Duncan2)
?Duncan
# Load
library(mosaic)
library(pander)
library(DT)
library(tidyverse)
library(car)
knitr::opts_chunk$set(echo = TRUE)
View(Duncan)
?Duncan
# Filter data set
Duncan2 <- Duncan %>%
filter(type %in% c("wc", "prof"))
# Wilcoxon Rank Sum Test
wilcox.test(type ~ prestige, mu = 0, alternative = "two.sided", data= Duncan2)
# Wilcoxon Rank Sum Test
wilcox.test(prestige ~ type, mu = 0, alternative = "two.sided", data= Duncan2)
# Wilcoxon Rank Sum Test
wilcox.test(prestige ~ type, mu = 0, alternative = "two.sided", conf.level = 0.05,data= Duncan2)
# Wilcoxon Rank Sum Test
wilcox.test(prestige ~ type, mu = 0, alternative = "two.sided", conf.level = 0.05, data= Duncan2)
# Wilcoxon Rank Sum Test
# wilcox.test(prestige ~ type, mu = 0, alternative = "two.sided", conf.level = 0.05, data = Duncan2)
wilcox.test(Duncan2$prestige[type == "prof"], Duncan2$prestige[type == "wc"], alternative = "two.sided", conf.level = 0.05, data = Duncan2 )
# Wilcoxon Rank Sum Test
wilcox.test(prestige ~ type, mu = 0, alternative = "greater", conf.level = 0.05, data = Duncan2)
# wilcox.test(Duncan2$prestige[Duncan2$type == "prof"], Duncan2$prestige[Duncan2$type == "wc"], alternative = "two.sided", conf.level = 0.05, data = Duncan2)
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot(stat = "identity") +
theme.classic()
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot(stat = "identity") +
theme_classic()
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot() +
theme_classic()
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot() +
theme_classic() +
fill.color.overide = c("dodgerblue4", "white") +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = .5),
legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
scale_fill_manual(values = c("dodgerblue4", "white") +
)
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = c("dodgerblue4", "white")) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = .5),
legend.position = "none",
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12)
)
Colors()
colors()
# Assume your list is called `color_list` (vector of strings)
color_list <- colors()  # This gets all named colors in R (same list you're using)
# Now generate Python-style dictionary syntax:
cat(paste0(
"colors = {\n",
paste0(seq_along(color_list), ": \"", color_list, "\"", collapse = ",\n"),
"\n}"
))
# Assume your list is called `color_list` (vector of strings)
color_list <- colors()  # This gets all named colors in R (same list you're using)
# Now generate Python-style dictionary syntax:
cat(paste0(
"colors = {\n",
paste0("{", seq_along(color_list), ": \"", color_list, "\"", collapse = "",\n"),
# Assume your list is called `color_list` (vector of strings)
color_list <- colors()  # This gets all named colors in R (same list you're using)
# Now generate Python-style dictionary syntax:
cat(paste0(
"colors = {\n",
paste0(seq_along(color_list), ": \"", color_list, "\"", collapse = ",\n"),
"\n}"
))
# Assume your list is called `color_list` (vector of strings)
color_list <- colors()  # This gets all named colors in R (same list you're using)
# Now generate Python-style dictionary syntax:
cat(paste0(
"colors = {\n",
"{", paste0(seq_along(color_list), ": \"", color_list, "\"", collapse = "},\n"),
"\n}"
))
# Assume your list is called `color_list` (vector of strings)
color_list <- colors()  # This gets all named colors in R (same list you're using)
# Now generate Python-style dictionary syntax:
cat(paste0(
"colors = {\n",
paste0("{", seq_along(color_list), ": \"", color_list, "\"", collapse = "},\n"),
"\n}"
))
"clipr" %in% rownames(installed.packages())
# Recreated graph:
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot() +
theme_minimal() +
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# title
plot.title = element_text(face = "bold", size = 16, hjust = .5),
# legend
legend.position = "none",
# axes labels
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
# axes text
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
# Block 5
# Block 6
# Block 7
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
geom_boxplot() +
theme_classic() +  # <-- correct base theme
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# Title
plot.title = element_text(face = "bold", size = 16, hjust = .5),
# Legend
legend.position = "none",
# Axes labels
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
# Axes text
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
# Axes ticks
axis.ticks.x = element_line(color = "black"),
axis.ticks.y = element_line(color = "black")
# No gridlines needed — classic has none
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
ggplot(data = iris, aes(x = Species, y = Sepal.Length)) +
geom_boxplot(linetype = "dashed", outlier.shape = 1) +
stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..), outlier.shape = 1) +
stat_boxplot(geom = "errorbar", aes(ymin = ..ymax..)) +
stat_boxplot(geom = "errorbar", aes(ymax = ..ymin..)) +
scale_y_continuous(breaks = seq(4.5, 8.0, 0.5)) +
labs(title = "Sepal Variation Across Species",
x = "Species",
y = "Sepal Length") +
theme_classic() + # remove panel background and gridlines
theme(plot.title = element_text(hjust = 0.5,  # hjust = 0.5 centers the title
size = 14,
face = "bold"),
panel.border = element_rect(linetype = "solid",
colour = "black", fill = "NA", size = 0.5))
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
# Side-by-side boxplot. Initially turn on dashed lines
geom_boxplot(linetype = "dashed", outlier.shape = 16) +
# Draw box (solid line) around either box
stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..), outlier.shape = 1) +
# Add error bars at the max and min (outliers excluded)
stat_boxplot(geom = "errorbar", aes(ymin = ..ymax..)) +
stat_boxplot(geom = "errorbar", aes(ymax = ..ymin..)) +
theme_classic() +  # <-- correct base theme
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# Title
plot.title = element_text(face = "bold", size = 18, hjust = .5),
# Legend
legend.position = "none",
# Axes
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(size = 14, color = "black"),
axis.ticks = element_line(color = "black"),
axis.ticks.length = unit(10, "pt"),
# Plot area
panel.border = element_rect(color = "black", fill = NA, size = 0.8)
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
# Side-by-side boxplot. Initially turn on dashed lines
geom_boxplot(linetype = "dashed", outlier.shape = 18) +
# Draw box (solid line) around either box
stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..), outlier.shape = 1) +
# Add error bars at the max and min (outliers excluded)
stat_boxplot(geom = "errorbar", aes(ymin = ..ymax..)) +
stat_boxplot(geom = "errorbar", aes(ymax = ..ymin..)) +
theme_classic() +  # <-- correct base theme
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# Title
plot.title = element_text(face = "bold", size = 18, hjust = .5),
# Legend
legend.position = "none",
# Axes
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(size = 14, color = "black"),
axis.ticks = element_line(color = "black"),
axis.ticks.length = unit(10, "pt"),
# Plot area
panel.border = element_rect(color = "black", fill = NA, size = 0.8)
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
# Side-by-side boxplot. Initially turn on dashed lines
geom_boxplot(linetype = "dashed", outlier.shape = 10) +
# Draw box (solid line) around either box
stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..), outlier.shape = 1) +
# Add error bars at the max and min (outliers excluded)
stat_boxplot(geom = "errorbar", aes(ymin = ..ymax..)) +
stat_boxplot(geom = "errorbar", aes(ymax = ..ymin..)) +
theme_classic() +  # <-- correct base theme
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# Title
plot.title = element_text(face = "bold", size = 18, hjust = .5),
# Legend
legend.position = "none",
# Axes
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(size = 14, color = "black"),
axis.ticks = element_line(color = "black"),
axis.ticks.length = unit(10, "pt"),
# Plot area
panel.border = element_rect(color = "black", fill = NA, size = 0.8)
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
ggplot(Duncan2, aes(x = type, y = prestige, fill = type)) +
# Side-by-side boxplot. Initially turn on dashed lines
geom_boxplot(linetype = "dashed", outlier.shape = 10) +
# Draw box (solid line) around either box
stat_boxplot(aes(ymin = ..lower.., ymax = ..upper..), outlier.shape = 1) +
# Add error bars at the max and min (outliers excluded)
stat_boxplot(geom = "errorbar", aes(ymin = ..ymax..)) +
stat_boxplot(geom = "errorbar", aes(ymax = ..ymin..)) +
theme_classic() +  # <-- correct base theme
scale_fill_manual(values = c("steelblue3", "white")) +
theme(
# Title
plot.title = element_text(face = "bold", size = 18, hjust = .5),
# Legend
legend.position = "none",
# Axes
axis.title = element_text(size = 16, color = "black"),
axis.text = element_text(size = 14, color = "black"),
axis.ticks = element_line(color = "black"),
axis.ticks.length = unit(10, "pt"),
# Plot area
panel.border = element_rect(color = "black", fill = NA, size = 0.8)
) +
labs(
title = "Duncan Prestige of Occupations Data",
x = "Type of Profession",
y = "Prestige Score (Higher is More Prestigious)"
)
scales::show_col("steelblue3")
scales::show_col(c("steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4"))
# Subsets
pretige_prof <- Duncan2$prestige[Duncan2$type == "prof"]
pretige_wc <- Duncan2$prestige[Duncan2$type == "wc"]
# Favstats
favstats_prof <- favstats(pretige_prof)
favstats_prof <- favstats(pretige_wc)
# Subsets
pretige_prof <- Duncan2$prestige[Duncan2$type == "prof"]
pretige_wc <- Duncan2$prestige[Duncan2$type == "wc"]
# Favstats
favstats(pretige_prof)
favstats(pretige_wc)
.385/.85
38.5/85
(38.5/85)*100
Salaries2 <- Salaries %>%
mutate(rank = as.character(rank))
# View the dataframe
View(Salaries2)
cols(Salaries2)
colnames(Salaries2)
?Salaries
