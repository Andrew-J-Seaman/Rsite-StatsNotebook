filter(self_perception_weight %in% 1:6) %>%
# convert GPA to numeric
mutate(GPA = GPA_num) %>%
# drop levels
droplevels() %>%
# convert to a factor with six levels
mutate(self_perception_weight = factor(self_perception_weight, levels = 1:6)) %>%
# remove the temp column and select the needed columns
select(GPA, self_perception_weight, -GPA_num)
View(food1)
str(food1)
# Does one's self-perception of their weight impact their GPA?
food1 %>%
boxplot(
GPA ~ self_perception_weight,
data = .,
xlab = "Self Perception of Weight",
main = "Regardless of Self Perception of Weight GPA Varies Little"
)
# Does one's self-perception of their weight impact their GPA?
dotplot(
GPA ~ self_perception_weight,
data = food1,
xlab = "Self Perception of Weight",
main = "Regardless of Self Perception of Weight GPA Varies Little",
na.rm = TRUE
)
# Test the realtionship between GPA and self_perception_weight
test_result <-food1 %>%
kruskal.test(GPA ~ self_perception_weight, data = .)
# test_result # Raw output
pander(test_result) # Neat output
food2 <- food1 %>%
rename(SPW = self_perception_weight)
fvs <- food2 %>%
favstats(GPA ~ SPW, data = .) #%>%
# select(SPW, median) %>%
pander(fvs)
ggplot() +
# boxplots
geom_boxplot(
data = food2,
aes(x = SPW, y = GPA),
fill = "lightgray",
color = "black"
) +
# summary lines
geom_line(
data = fvs,
aes(x = SPW, y = min, group = 1, color = "Min"),
alpha = .8, linetype = "dotted"
) +
geom_line(
data = fvs,
aes(x = SPW, y = max, group = 1, color = "Max"),
alpha = .8, linetype = "dotted"
) +
geom_line(
data = fvs,
aes(x = SPW, y = median, group = 1, color = "Median")
) +
geom_line(
data = fvs,
aes(x = SPW, y = mean, group = 1, color = "Mean")
) +
scale_x_discrete(
labels = levels(food2$SPW)
) +
labs(
title = "Summary GPA across SPW levels with Boxplots",
x = "Self Perception Weight",
y = "GPA",
color = "Statistic"
) +
theme_classic()
# This is what the `tidyr` library was imported for.
# Elongate the data
fvs_long <- fvs %>%
pivot_longer(cols = c(min, Q1, median, Q3, max, mean, sd),
names_to = "Statistic",
values_to = "Value")
# Define the negative offset for use in straightening labels and whatnot.
neg_offset <- -.2
# Primary plot
ggplot(fvs_long, aes(x = as.numeric(SPW) + neg_offset, y = Value, color = Statistic)) +
# Dotplot: jittered value distribution
geom_dotplot(data = food2, aes(x = SPW, y = GPA),
binaxis = "y", stackdir = "up", fill = "gray90", color = "gray90", binwidth = 0.05, alpha = 0.3
) +
# Dotplot: summary stats
geom_point(size = 2, position = position_dodge(width = 0.0), shape = 1) +
# Line charts: summary stats
geom_line(data = fvs, aes(x = as.numeric(SPW) + neg_offset, y = median, color = "median")) + # Line to track the median
geom_line(data = fvs, aes(x = as.numeric(SPW) + neg_offset, y = mean, color = "mean")) + # Line to track the mean
# Data labels: select summary stats
geom_label( # label: median
data = fvs,
aes(x = as.numeric(SPW) - .5, y = median + .2, label = round(median, digits=1), color = "median"),
size = 2.2,
fill = "gray100",
show.legend = FALSE
) +
geom_label( # label: mean
data = fvs,
aes(x = as.numeric(SPW) - .5, y = mean - .2, label = round(mean, digits=1), color = "mean"),
size = 2.2,
fill = "gray100",
show.legend = FALSE
) +
# Vertical line: Separate the factor levels
geom_vline(xintercept = seq(1, 6, by = 1) + 0.4, color = "gray80", linetype = "dashed") +
labs(
title = "Summary Statistics of GPA by Self-Perception of Weight",
x = "Self Perception of Weight",
y = "GPA"
) +
theme_classic()
# Find the differences between the median and mean for each factor level
fvs2 <- fvs %>%
mutate(
diff = round(median - mean, digits=3) # I renamed this variable below. I want to call it diff here for simplicity sake.
)
# Display a pivoted table of the differences
fvs2_wide <- fvs2 %>%
select(SPW, 'median - mean' = diff) %>%
mutate(Calculation = 'median - mean') %>%
pivot_wider(
names_from = SPW,
values_from = 'median - mean') %>%
relocate(Calculation, .before = everything())
# Calculate the average difference
avg_diff <- round(mean(fvs2$diff), digits = 2)
# Display long, subsetted table
pander(fvs2_wide)
# Calculate the difference
mean_of_means <- mean(fvs$mean) # Mean of means
mean_of_means_rounded <- round(mean(fvs$mean), digits=2) # Mean of means rounded
mean_lvl5 <- fvs$mean[fvs$SPW == 5] # Mean (factor lvl 5)
mean_lvl5_rounded <- round(fvs$mean[fvs$SPW == 5], digits = 2) # Mean (factor lvl 5)
diff_lvl5 <- mean_of_means - mean_lvl5
diff_lvl5_rounded <- round(mean_of_means - mean_lvl5, digits=2) # Difference
red <- "firebrick"
# ---
mean_lvl6 <- fvs$mean[fvs$SPW == 6] # Mean (factor lvl 6)
mean_lvl6_rounded <- round(fvs$mean[fvs$SPW == 6], digits = 2) # Mean (factor lvl 6)
diff_lvl6 <- mean_of_means - mean_lvl6
diff_lvl6_rounded <- round(mean_of_means - mean_lvl6, digits=2)
if (diff_lvl6 >= 0){
above_or_below <- "above"
txt_color <- "forestgreen"
} else {
above_or_below <- "below"
txt_color <- "firebrick"
}
median_lvl_1_4 <- fvs[fvs$median %in% c(1-4)]
pander(median_lvl_1_4)
median_lvl_1_4 <- fvs$median[fvs$SPW %in% 1:4]
median_lvl_1_4
ls <- median_lvl_1_4 <- fvs$median[fvs$SPW %in% 1:4]
min_val <- min(ls)
max_val <- max(ls)
ls <- median_lvl_1_4 <- fvs$median[fvs$SPW %in% 1:4]
min_val <- min(ls)
max_val <- max(ls)
cat("Min:" & min_val & "; Max:" & max_val, sep=" ")
# Max & Min Median (SPW levels 1-4)
ls <- median_lvl_1_4 <- fvs$median[fvs$SPW %in% 1:4]
min_val <- min(ls)
max_val <- max(ls)
cat(paste("Min:", min_val, "; Max:", max_val), sep = " ")
# Manually calculate the same stats as favstats (library Mosaic) but with greater control over the precision of calculated values. Here dplyr is used instead.
# Calculate stats
fvs_manual <- food2 %>%
group_by(SPW) %>%
summarise(
mean = mean(GPA, na.rm = TRUE),
median = median(GPA, na.rm = TRUE),
min = min(GPA, na.rm = TRUE),
max = max(GPA, na.rm = TRUE),
n = n()
)
# Max & Min 'median' (SPW levels: 1-4)
ls <- median_lvl_1_4 <- fvs_manual$median[fvs_manual$SPW %in% 1:4]
min_median_lvl_1_4 <- min(ls)
max_median_lvl_1_4 <- max(ls)
# Minimum median (SPW levels: all
min_median_lvl_all <- min(fvs_manual$median) # Lvl 5
# Median of medians (SPW levels: all)
median_of_medians <- median(fvs_manual$median)
# Calculate difference
diff <- median_of_medians - min_median_lvl_all
# Median (SPW level 6)
median_lvl_6 <- fvs_manual$median[fvs_manual$SPW == 6]
# Manually calculate the same stats as favstats (library Mosaic) but with greater control over the precision of calculated values. Here dplyr is used instead.
# Calculate stats
fvs_manual <- food2 %>%
group_by(SPW) %>%
summarise(
mean = mean(GPA, na.rm = TRUE),
median = median(GPA, na.rm = TRUE),
min = min(GPA, na.rm = TRUE),
max = max(GPA, na.rm = TRUE),
n = n()
)
# Max & Min 'median' (SPW levels: 1-4)
ls <- median_lvl_1_4 <- fvs_manual$median[fvs_manual$SPW %in% 1:4]
min_median_lvl_1_4 <- min(ls)
max_median_lvl_1_4 <- max(ls)
# Minimum median (SPW levels: all
min_median_lvl_all <- min(fvs_manual$median) # Lvl 5
# Median of medians (SPW levels: all)
median_of_medians <- median(fvs_manual$median)
# Calculate difference
diff <- median_of_medians - min_median_lvl_all
# Median (SPW level 6)
median_lvl_6 <- fvs_manual$median[fvs_manual$SPW == 6]
# Manually calculate the same stats as favstats (library Mosaic) but with greater control over the precision of calculated values. Here dplyr is used instead.
# Calculate stats
fvs_manual <- food2 %>%
group_by(SPW) %>%
summarise(
mean = mean(GPA, na.rm = TRUE),
median = median(GPA, na.rm = TRUE),
min = min(GPA, na.rm = TRUE),
max = max(GPA, na.rm = TRUE),
n = n()
)
# Max & Min 'median' (SPW levels: 1-4)
ls <- median_lvl_1_4 <- fvs_manual$median[fvs_manual$SPW %in% 1:4]
min_median_lvl_1_4 <- min(ls)
max_median_lvl_1_4 <- max(ls)
# Minimum median (SPW levels: all
min_median_lvl_all <- min(fvs_manual$median) # Lvl 5
# Median of medians (SPW levels: all)
median_of_medians <- median(fvs_manual$median)
# Calculate difference
diff <- median_of_medians - min_median_lvl_all
# Median (SPW level 6)
median_lvl_6 <- fvs_manual$median[fvs_manual$SPW == 6]
print("Max & Min 'median' (SPW levels: 1-4)")
min_median_lvl_1_4
max_median_lvl_1_4
print("Minimum median (SPW levels: all")
min_median_lvl_all
print("Median of medians (SPW levels: all)")
median_of_medians
print("Calculate difference")
diff
print("Median (SPW level 6)")
median_lvl_6
# Max & Min 'median' (SPW levels: 1-4)
ls <- median_lvl_1_4 <- fvs$median[fvs$SPW %in% 1:4]
min_median_lvl_1_4 <- min(ls)
max_median_lvl_1_4 <- max(ls)
# Minimum median (SPW levels: all
min_median_lvl_all <- min(fvs$median) # Lvl 5
# Median of medians (SPW levels: all)
median_of_medians <- median(fvs$median)
# Calculate difference
diff <- median_of_medians - min_median_lvl_all
# Median (SPW level 6)
median_lvl_6 <- fvs$median[fvs$SPW == 6]
diff_6 <- median_of_medians - median_lvl_6
cat("lvl 5:", diff, "lvl 6:", diff_6, sep=" ")
cat("Min median GPA:", min_median_value, "at SPW level", min_median_level)
# Get the SPW level corresponding to the minimum median
min_median_value <- min(fvs$median)
min_median_level <- fvs$SPW[which.min(fvs$median)]
cat("Min median GPA:", min_median_value, "at SPW level", min_median_level)
knitr::opts_chunk$set(echo = TRUE)
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
# Create the boxplot
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA") +
theme_minimal()
# Create the boxplot
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
coord_flip() +
labs(title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA") +
theme_minimal()
# ChatGPT - Minimal Working Boxplot
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA"
) +
theme_minimal()
str(food$GPA)
# Clean the data for plotting
food$GPA <- as.numeric(as.character(food$GPA)) # GPA as numeric
unique(food$GPA)
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "../../Data"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
rm(list = ls(all.names = TRUE))
rm(list = ls())
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
View(food)
knitr::opts_chunk$set(echo = TRUE)
colSums(is.na(food))
View(food)
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
food1 <- food %>%
# convert GPA to numeric and store in a temp column
mutate(GPA_num = as.numeric(as.character(GPA))) %>%
# filter to only rows with valid GPA
filter(!is.na(GPA_num)) %>%
# convert GPA to numeric
mutate(GPA = GPA_num) %>%
# remove the temp column and select the needed columns
select(GPA, eating_changes_coded, -GPA_num)
# ChatGPT - Minimal Working Boxplot
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA"
) +
theme_minimal()
food1 %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
rm(list = ls(all.names = TRUE))
rm(list = ls())
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
knitr::opts_chunk$set(echo = TRUE)
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
# ChatGPT - "Minimal Working Boxplot"
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA"
) +
theme_minimal()
food1 %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
food %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
food1 <- food %>%
# convert GPA to numeric and store in a temp column
mutate(GPA_num = as.numeric(as.character(GPA))) %>%
# filter to only rows with valid GPA
filter(!is.na(GPA_num)) %>%
# convert GPA to numeric
mutate(GPA = GPA_num) %>%
# remove the temp column and select the needed columns
select(GPA, eating_changes_coded, -GPA_num)
food1 %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
rm(list = ls())
rm(list = ls(all.names = TRUE))
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
knitr::opts_chunk$set(echo = TRUE)
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
# Change data type for GPA
food$GPA <- as.numeric(as.character(food$GPA))
# Change data type for GPA
food$GPA <- filter(!is.na(as.numeric(as.character(food$GPA)))
# Change data type for GPA
food <- food %>%
# filter to only rows with valid GPA
filter(!is.na(GPA)) %>%
# convert GPA to numeric and store
mutate(GPA = as.numeric(as.character(GPA)))
rm(list = ls(all.names = TRUE))
rm(list = ls())
library(mosaic)
library(car)
library(DT)
library(pander)
library(readr)
library(tidyverse) # Includes the 'tidyr' package
knitr::opts_chunk$set(echo = TRUE)
# Data import: source file variables for later construction
file_name <- "food.csv"
file_path <- "/Users/andrewseaman/Desktop/Semester/MATH325/Stats-Notebook-Seaman/Data/"
# Data import: construct the full file path and import the data
food <- read_csv(file.path(file_path, file_name))
# Clean the data
food <- food %>%
filter(!is.na(GPA)) # Remove nulls
# ChatGPT - "Minimal Working Boxplot"
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA"
) +
theme_minimal()
food1 %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
food %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
# Clean the data
food <- food %>%
filter(!is.na(GPA)) %>% # Remove nulls
mutate(GPA = as.numeric(as.character(GPA))) # Convert GPA to numeric
# Clean the data
food <- food %>%
filter(!is.na(GPA)) %>% # Remove nulls
mutate(GPA = as.numeric(as.character(GPA))) # Convert GPA to numeric
# Clean the data
food <- food %>%
filter(!is.na(GPA)) %>% # Remove nulls
mutate(GPA = as.numeric(as.character(GPA))) # Convert GPA to numeric
food %>%
boxplot(
GPA ~ eating_changes_coded,
data = .,
xlab = "Eating Habit Changes",
main = "Boxplot (please)"
)
# ChatGPT - "Minimal Working Boxplot"
ggplot(food, aes(x = eating_changes_coded, y = GPA)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(
title = "GPA by Changes in Eating Habits Since College",
x = "Eating Habit Changes",
y = "GPA"
) +
theme_minimal()
